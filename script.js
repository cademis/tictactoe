// use as little global code as possible

// when there is one of something, use a module (prototypal pattern). https://youtu.be/doXpW5AD60Q

// When there is multiple of something, use a factory function

const createPlayerFactory = (name, mark) => {
  return {
    name,
    mark,
  };
};

// control the logic of the game
const displayController = (() => {
  let players;
  let currentPlayerIndex;
  let gameOver;

  const start = () => {
    players = [
      createPlayerFactory(document.querySelector("#player1").value, "X"),
      createPlayerFactory(document.querySelector("#player2").value, "O"),
    ];
    currentPlayerIndex = 0;
    gameOver = false;
    // gameBoard.clearBoard();
    gameBoard.render();
  };
  const handleClick = (event) => {
    let index = +event.target.id.split("-")[1];
    if (gameBoard.getGameBoard()[index] !== null) return;
    gameBoard.update(index, players[currentPlayerIndex].mark);
    currentPlayerIndex = currentPlayerIndex === 0 ? 1 : 0;
  };

  return { start, handleClick };
})();

// display the board
const gameBoard = (() => {
  let board = [null, null, null, null, null, null, null, null, null];

  const clearBoard = () => {
    board = [null, null, null, null, null, null, null, null, null];
  };

  const boardElement = document.querySelector(".board");
  const cells = boardElement.querySelectorAll(".cell");
  const render = function () {
    cells.forEach((cell, index) => {
      cell.innerHTML = board[index];
    });
  };
  cells.forEach((cell) => {
    cell.addEventListener("click", displayController.handleClick);
  });
  const update = (index, mark) => {
    board[index] = mark;
    render();
  };
  const getGameBoard = () => board;

  return { render, update, getGameBoard, clearBoard };
})();

// let startButton = document.querySelector("#start");

// startButton.addEventListener("click", () => displayController.start());

displayController.start();

// displayController.bindElements();

// const playerFactory = (name) => {
//   this.name = name;
//   const sayName = () => console.log(`${this.name}`);
//   return {
//     sayName,
//   };
// };

// const player1 = playerFactory("sally");
// const player2 = playerFactory("jeff");

// player1.sayName();

// console.log(player1);

// Generated by AI

// function Game() {
//   this.board = Array(9).fill(null);
//   this.currentPlayer = "X";
//   this.cells = document.querySelectorAll(".cell");
//   this.gameOver = false;

//   this.cells.forEach((cell, i) => {
//     cell.addEventListener("click", () => {
//       if (!this.board[i] && !this.gameOver) {
//         this.markCell(i);
//         this.checkWin();
//         this.switchPlayer();
//       }
//     });
//   });
// }

// Game.prototype.markCell = function (index) {
//   this.board[index] = this.currentPlayer;
//   this.cells[index].innerText = this.currentPlayer;
// };

// Game.prototype.checkWin = function () {
//   const winningCombinations = [
//     [0, 1, 2],
//     [3, 4, 5],
//     [6, 7, 8],
//     [0, 3, 6],
//     [1, 4, 7],
//     [2, 5, 8],
//     [0, 4, 8],
//     [2, 4, 6],
//   ];

//   winningCombinations.forEach((combo) => {
//     if (
//       this.board[combo[0]] &&
//       this.board[combo[0]] === this.board[combo[1]] &&
//       this.board[combo[0]] === this.board[combo[2]]
//     ) {
//       this.gameOver = true;
//       console.log(`Player ${this.currentPlayer} wins!`);
//     }
//   });
// };

// Game.prototype.switchPlayer = function () {
//   this.currentPlayer = this.currentPlayer === "X" ? "O" : "X";
// };

// new Game();
